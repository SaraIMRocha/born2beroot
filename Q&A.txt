O que é uma virtual machine

Uma máquina virtual é um ambiente que funciona como um computador independente dentro de outro 
sistema operativo hospedeiro. É criada através de um software denominado "hipervisor" ou 
"monitor de máquinas virtuais". O hipervisor permite a criação e execução de várias máquinas 
virtuais simultaneamente, cada uma com o seu próprio sistema operativo e recursos virtuais.

Quando uma máquina virtual é iniciada, o hipervisor aloca recursos do sistema físico, como CPU, 
memória RAM, armazenamento e dispositivos de rede, para a máquina virtual. A máquina virtual 
executa o seu próprio sistema operativo, aplicações e processos, tal como se estivesse a funcionar 
num computador físico dedicado.

O hipervisor gere e isola as máquinas virtuais, garantindo que partilham os recursos físicos de
forma segura e eficiente. Também fornece interfaces para interação com as máquinas virtuais, 
permitindo aos utilizadores controlar e gerir o ambiente virtual.

As máquinas virtuais oferecem vantagens como a capacidade de executar vários sistemas operativos 
num único hardware, o isolamento de ambientes, a facilidade de migração entre servidores e a 
realização de testes de software em diferentes configurações. São amplamente utilizadas em data 
centers, servidores corporativos e ambientes de desenvolvimento, proporcionando flexibilidade e 
eficiência na utilização dos recursos computacionais.

--------------------------------------------------------------------------------------------------------

Porquê Debian em vez de Rocky

    Comunidade e suporte: O Debian é uma distribuição Linux estabelecida, com uma comunidade 
	ativa e um vasto conjunto de recursos e documentação disponíveis. Para alguém novo, a 
	disponibilidade de suporte e recursos pode ser um ponto importante a considerar.

    Estabilidade e confiabilidade: O Debian é conhecido pela sua estabilidade e confiabilidade. 
	A versão estável do Debian é testada e atualizada de forma rigorosa, o que pode ser atraente 
	para alguém que deseja uma base sólida e estável para as suas máquinas virtuais.

    Ampla seleção de pacotes: O Debian possui um vasto repositório de pacotes, o que significa 
	que há uma ampla seleção de software disponível para instalação nas máquinas virtuais. 
	Isso proporciona flexibilidade e opções para atender às necessidades específicas do usuário.

    Versatilidade de arquiteturas: O Debian suporta uma ampla gama de arquiteturas de hardware, 
	o que pode ser útil se alguém estiver a trabalhar com máquinas virtuais em diferentes ambientes 
	ou plataformas.

    Filosofia do software livre: O Debian tem um compromisso com a filosofia do software livre e 
	adere aos princípios de liberdade de uso, distribuição e modificação do software. 
	Se alguém valoriza o software livre e de código aberto, o Debian pode ser uma escolha apropriada.

--------------------------------------------------------------------------------------------------------

As diferenças básicas entre o Rocky Linux e o Debian podem ser resumidas nos seguintes pontos cruciais:

Rocky Linux:

Derivação: O Rocky Linux é uma bifurcação (fork) do Red Hat Enterprise Linux (RHEL). 
		   Foi criado como uma alternativa após o fim do CentOS como uma distribuição clone do RHEL.
Foco na estabilidade: O objetivo principal do Rocky Linux é fornecer uma distribuição estável, 4
		   confiável e de longo prazo, adequada para ambientes de produção e servidores.
Gestão de pacotes: Utiliza o gestor de pacotes "dnf" (Dandified YUM), que é uma evolução do YUM 
		   (Yellowdog Updater, Modified) utilizado no RHEL.
Comunidade: O Rocky Linux é desenvolvido e mantido por uma comunidade de voluntários, 
		    seguindo um modelo de desenvolvimento aberto.

Debian:

Derivação: O Debian é uma distribuição Linux independente, desenvolvida pela comunidade, 
		   com foco em software livre e de código aberto.
Filosofia do Software Livre: O Debian adere estritamente aos princípios do Software Livre 
		   e concentra-se em fornecer um sistema operativo composto inteiramente por software livre.
Gestão de pacotes: Utiliza o gestor de pacotes "apt" (Advanced Packaging Tool), 
		   que é conhecido pela sua eficiência, facilidade de uso e vasto repositório de pacotes.
Arquiteturas suportadas: O Debian oferece suporte a um amplo conjunto de arquiteturas de 
	       hardware, desde sistemas x86 e ARM até mainframes.
Ramificações: O Debian possui várias ramificações, incluindo o Debian Stable (estável), 
		   Testing (teste) e Unstable (instável), cada uma com diferentes níveis de estabilidade 
		   e atualizações de software.

--------------------------------------------------------------------------------------------------------

Qual o propósito de utilizar uma VM

-> Criar um ambiente virtualizado que simula um computador completo dentro de outro sistema 
	operativo hospedeiro.
-> Isolar ambientes de trabalho e garantir que um não interfira no outro.
-> Aumentar a segurança ao executar aplicações suspeitas dentro de uma VM isolada.
-> Consolidar vários servidores físicos em um único hardware poderoso.
-> Ser flexível e escalável, permitindo a rápida criação, clonagem e migração de VMs.
-> Simplificar a manutenção ao realizar tarefas de atualização e correção de forma isolada.
-> Melhorar a gestão, segurança e eficiência dos sistemas de computação.

Em suma, as VMs proporcionam ambientes virtuais isolados, seguros e flexíveis para diversos fins, 
como desenvolvimento, teste, produção e virtualização de servidores.

--------------------------------------------------------------------------------------------------------

As diferenças básicas entre o apt e o aptitude, dois gestores de pacotes utilizados no sistema Debian, 
podem ser resumidas nos seguintes pontos cruciais:

apt:

-> Interface de linha de comando: 
	O apt é um gestor de pacotes com uma interface de linha de comando simples e direta.
-> Sintaxe concisa: 
	O apt utiliza uma sintaxe concisa para executar operações comuns de gestão de pacotes, 
	como instalação, remoção e atualização.
-> Integração com o dpkg: 
	O apt trabalha em conjunto com o dpkg, o sistema de gestão de pacotes de baixo nível 
	no Debian, para gerenciar a instalação e remoção de pacotes.
-> Funcionalidade básica: 
	O apt é mais focado nas funcionalidades básicas de gestão de pacotes, 
	oferecendo uma forma rápida e eficiente de instalar e atualizar software.

aptitude:

-> Interface de linha de comando e TUI: 
	O aptitude possui uma interface de linha de comando semelhante ao apt, mas também 
	oferece uma interface textual baseada em TUI (Interface de Texto Baseada em Terminal).
-> Resolução de dependências avançada: 
	O aptitude tem uma capacidade avançada de resolver dependências, o que significa que 
	pode resolver automaticamente as dependências dos pacotes ao realizar operações de instalação 
	ou remoção.
-> Recursos adicionais: 
	O aptitude oferece recursos adicionais, como uma interface de pesquisa aprimorada, 
	categorização de pacotes e opções de filtragem.
-> Visualização interativa: 
	A interface TUI do aptitude permite a visualização e navegação interativas pelos pacotes, 
	facilitando a exploração e a tomada de decisões.

---------------------------------------------------------------------------------------------------------

AppArmor

O AppArmor é um sistema de controlo de acesso obrigatório (Mandatory Access Control - MAC) 
desenvolvido para sistemas operativos Linux. Ele fornece uma camada adicional de segurança 
ao restringir as ações que um programa pode executar num sistema.

Aqui estão os pontos cruciais sobre como o AppArmor funciona:

-> Perfil de segurança: 
	O AppArmor funciona através de perfis de segurança que definem as restrições de acesso 
	para cada programa. Cada perfil é criado especificamente para um programa e contém regras 
	que controlam quais recursos o programa pode aceder.
-> Política baseada em perfil: 
	O AppArmor utiliza uma abordagem de política baseada em perfil, o que significa que os 
	perfis de segurança são pré-configurados e associados a programas específicos. 
	Cada perfil define as permissões de acesso a ficheiros, diretórios, dispositivos, redes 
	e outros recursos do sistema.-
-> Controlo granular: 
	O AppArmor oferece um controlo granular sobre as permissões de acesso. Os perfis de 
	segurança podem especificar quais ficheiros um programa pode ler, escrever ou executar, 
	limitando assim o impacto de uma possível exploração ou comprometimento do programa.
-> Auditoria e registo de atividades: 
	O AppArmor regista as tentativas de acesso não autorizado e outras atividades suspeitas 
	num ficheiro de registo. Isso permite a auditoria e a análise posterior das atividades do 
	programa, ajudando a identificar possíveis violações de segurança.
-> Integração com o sistema operativo: 
	O AppArmor está integrado no kernel do Linux e é ativado por padrão em algumas distribuições, 
	como o Ubuntu. Pode ser gerido através de ferramentas de linha de comando ou interfaces 
	gráficas específicas, permitindo a configuração e monitorização dos perfis de segurança.

--------------------------------------------------------------------------------------------------------

Qual é a vantagem da password policy utilizada neste projeto

Esta política de senha ajuda a garantir que as senhas utilizadas pelos utilizadores sejam mais fortes, 
mais complexas e menos suscetíveis a ataques. Ela promove boas práticas de segurança, protegendo as 
contas de utilizadores e fortalecendo a segurança do sistema como um todo.

Desvantagens da implementação da política de senhas descrita:

    Complexidade para utilizadores.
		-> Dificulta os utilizadores criarem e lembrarem de senhas complexas
    Impacto na usabilidade.
		-> Os utilizadores podem precisar alterar suas senhas com mais frequência 
		e encontrar dificuldades para criar senhas que atendam aos requisitos.
    Possibilidade de bloqueio de utilizadores legítimos.
    Falsa sensação de segurança.
		-> é importante reconhecer que elas não são uma solução completa para garantir 
		a segurança do sistema. Outras medidas de segurança, como autenticação em dois 
		fatores e proteção contra ataques de força bruta, também devem ser consideradas 
		para complementar a política de senhas.

É importante equilibrar a segurança com a usabilidade ao implementar políticas de senhas e 
considerar outras medidas de segurança além das restrições de senha.

--------------------------------------------------------------------------------------------------------

Logical volumes
	-> No geral, os volumes lógicos fornecem uma abordagem flexível e eficiente para gerir o 
	armazenamento em sistemas Linux, permitindo a criação de partições virtuais com recursos avançados 
	de redimensionamento e proteção de dados.

Resumo de como o LVM (Logical Volume Manager) funciona:

    O LVM permite criar volumes lógicos flexíveis a partir de dispositivos físicos.
    Os dispositivos físicos são agrupados em um Volume Group (VG).
    Dentro do VG, os Logical Volumes (LVs) são criados para armazenar dados.
    Os LVs podem ser redimensionados dinamicamente.
    Recursos avançados, como espelhamento e snapshots, estão disponíveis.
    O LVM facilita a migração de dados entre dispositivos.
    O LVM fornece uma camada de abstração para o gerenciamento de armazenamento, permitindo uma 
	flexibilidade maior no uso e gerenciamento dos volumes lógicos.

O LVM é uma ferramenta poderosa para gerenciar armazenamento em sistemas Linux, oferecendo recursos 
como redimensionamento dinâmico e recursos avançados, tornando o gerenciamento de volumes lógicos 
mais flexível e eficiente.

--------------------------------------------------------------------------------------------------------

O que significa UFW e para que serve

UFW significa "Uncomplicated Firewall" e é uma ferramenta de firewall para sistemas Linux. 
Ele fornece uma interface fácil de usar para configurar e gerenciar as regras de firewall do sistema.

As vantagens de usar o UFW são:

    Simplicidade: O UFW é projetado para ser fácil de usar, mesmo para utilizadores com pouca 
	experiência em firewalls. Sua interface simplificada torna a configuração e gerenciamento 
	das regras de firewall mais acessível.

    Comandos intuitivos: O UFW utiliza comandos simples e claros para permitir ou bloquear 
	tráfego de rede. Por exemplo, você pode permitir o acesso SSH com o comando "sudo ufw allow ssh".

    Fácil integração: O UFW é integrado nativamente ao sistema operativo Linux, o que facilita 
	sua instalação e uso. Além disso, muitas distribuições Linux incluem o UFW por padrão, 
	facilitando ainda mais sua adoção.

    Controlo granular: O UFW permite que você defina regras de firewall em nível de aplicativo, 
	porta ou endereço IP, oferecendo um controle granular sobre o tráfego de rede permitido ou bloqueado.

    Suporte a IPv6: O UFW suporta o protocolo de Internet IPv6, permitindo que se configure 
	regras de firewall para tráfego IPv6, além do IPv4.

    Regras predefinidas: O UFW oferece regras predefinidas para serviços comuns, como HTTP, 
	HTTPS, FTP, SSH, entre outros. Isso facilita a configuração rápida e segura de acesso a 
	serviços essenciais.

Em resumo, o UFW é uma ferramenta de firewall simples e eficaz para sistemas Linux. 
Sua simplicidade de uso, comandos intuitivos e controle granular fazem dele uma escolha popular 
para configurar e gerenciar as regras de firewall em servidores e máquinas Linux.

--------------------------------------------------------------------------------------------------------

O que é SSH e porque devemos utilizar

SSH significa "Secure Shell" e é um protocolo de rede seguro que permite a comunicação segura 
entre computadores. Ele é amplamente utilizado para acesso remoto a sistemas e para executar 
comandos de forma segura em uma rede.

Aqui estão algumas razões pelas quais você deve usar o SSH:

    Criptografia: O SSH utiliza criptografia para proteger a comunicação entre os computadores. 
	Isso significa que todas as informações transmitidas pelo SSH são criptografadas, tornando-as 
	praticamente impossíveis de serem interceptadas ou lidas por terceiros não autorizados.

    Autenticação segura: O SSH oferece métodos de autenticação seguros, como autenticação baseada em 
	chave pública e senha. Essas medidas garantem que apenas utilizadores autorizados possam acessar 
	um sistema remoto.

    Acesso remoto: O SSH permite que você acesse remotamente um computador ou servidor a partir de 
	qualquer local, desde que haja conectividade de rede. Isso é particularmente útil para 
	administradores de sistemas que precisam gerenciar servidores ou dispositivos a partir de uma 
	localização remota.

    Transferência de arquivos segura: Além de permitir o acesso remoto, o SSH também suporta a 
	transferência segura de arquivos entre computadores. O comando "scp" (Secure Copy) é usado para 
	transferir arquivos de forma segura usando o SSH.

    Encaminhamento de portas: O SSH permite o encaminhamento seguro de portas, permitindo que 
	você acesse serviços em uma máquina remota através de uma conexão SSH segura. Isso é útil 
	quando você precisa acessar aplicativos ou serviços em uma rede privada de forma segura.

    Sessões interativas: O SSH permite que você inicie sessões interativas em um sistema remoto, 
	o que significa que você pode executar comandos no terminal remoto como se estivesse fisicamente 
	presente no sistema.

Em suma, o SSH oferece uma comunicação segura, autenticação robusta e recursos avançados, como 
acesso remoto e transferência de arquivos segura. É uma ferramenta essencial para administradores 
de sistemas e qualquer pessoa que precise se conectar e interagir com sistemas remotos de forma segura.

--------------------------------------------------------------------------------------------------------

O que é Cron e para que serve

O cron é uma ferramenta do sistema operativo Linux que permite agendar tarefas para serem executadas 
em momentos específicos. É utilizado para automatizar a execução de comandos, scripts ou programas 
em intervalos regulares, como diariamente, semanalmente, mensalmente ou outros períodos definidos.

Com o cron, é possível configurar tarefas para serem executadas em segundo plano, sem intervenção manual. 
Estas tarefas podem incluir backups automáticos, atualizações de software, rotinas de manutenção, envio 
de relatórios por e-mail, entre outras.

O cron utiliza um ficheiro de configuração chamado crontab, onde se especificam os comandos a serem 
executados, o momento da execução (por exemplo, uma vez por dia às 8h) e outras opções, como 
redirecionamento de saída e tratamento de erros.

Ao configurar as tarefas no cron, é possível automatizar processos rotineiros, poupando tempo e 
garantindo que as tarefas sejam executadas de forma consistente e confiável. O cron é amplamente 
utilizado em servidores e sistemas Linux para agendar tarefas recorrentes e automatizar a 
administração do sistema.

No cron, o formato "* * * * *" é usado para definir o agendamento das tarefas. 
Cada asterisco representa um campo separado, correspondendo a minutos, horas, dias do mês, 
meses e dias da semana, respectivamente.

Aqui está uma explicação de cada campo:

    Minutos: 
	O primeiro campo representa os minutos da hora em que a tarefa será executada. 
	Pode variar de 0 a 59.

    Horas: 
	O segundo campo representa as horas do dia em que a tarefa será executada. 
	Pode variar de 0 a 23.

    Dias do mês: 
	O terceiro campo indica os dias específicos do mês em que a tarefa será executada. 
	Pode variar de 1 a 31.

    Meses: 
	O quarto campo especifica os meses do ano em que a tarefa será executada. 
	Pode ser de 1 a 12 (ou nomes de meses abreviados, como "jan" para janeiro, "feb" para fevereiro, etc.).

    Dias da semana: 
	O quinto campo define os dias da semana em que a tarefa será executada. 
	Pode variar de 0 a 7, onde 0 e 7 representam domingo (dom) e 1 a 6 correspondem 
	de segunda-feira (seg) a sábado (sáb), respetivamente.



Explanation
#!/bin/bash: Esta linha é chamada de shebang e indica que o script deve ser executado usando o shell Bash.

arch=$(uname -a): 
O comando uname -a retorna informações sobre o kernel e a arquitetura do sistema. 
Aqui, a saída é armazenada na variável arch para uso posterior.

cpup=$(cat /proc/cpuinfo | grep "physical id" | wc -l): 
Esta linha recupera o número de CPUs físicas no sistema. 
Ele usa o comando cat para ler o conteúdo do arquivo /proc/cpuinfo e, em seguida, 
direciona a saída para o comando grep para buscar as linhas contendo "physical id". 
Por fim, wc -l conta o número de linhas que correspondem ao padrão e atribui o resultado à variável cpup.

cpuv=$(cat /proc/cpuinfo | grep processor | wc -l): 
Similar à linha anterior, esse comando conta o número de CPUs virtuais no sistema, 
buscando as linhas que contêm "processor" no arquivo /proc/cpuinfo.

fram=$(free -m | awk '$1 == "Mem:" {print $2}'): 
Esta linha recupera a memória total do sistema em megabytes (MB) usando o comando free. 
A saída é direcionada para o awk, que procura pela linha que começa com "Mem:" e imprime 
o valor da segunda coluna (memória total). O resultado é armazenado na variável fram.

uram=$(free -m | awk '$1 == "Mem:" {print $3}'): 
Aqui, a memória utilizada do sistema é obtida extraindo o valor da terceira coluna da linha 
que começa com "Mem:" na saída do comando free. Ela é atribuída à variável uram.

pram=$(free | awk '$1 == "Mem:" {printf("%.2f"), $3/$2*100}'): 
Esta linha calcula a porcentagem de memória utilizada dividindo a memória utilizada ($3) 
pela memória total ($2) e, em seguida, multiplicando por 100. A função printf é usada para 
formatar a saída com duas casas decimais. O resultado é armazenado na variável pram.

fdisk=$(df -Bg | grep '^/dev/' | grep -v '^/boot$' | awk '{ft += $2} END {print ft}'): 
Este comando recupera o espaço total em disco em gigabytes (GB) usando o comando df para 
listar o uso do espaço em disco dos sistemas de arquivos. A saída é filtrada para incluir 
apenas as linhas que começam com "/dev/" e excluir "/boot". O comando awk calcula a soma da
segunda coluna (tamanho do disco) e imprime o valor total, que é atribuído à variável fdisk.

udisk=$(df -Bg | grep '^/dev/' | grep -v '^/boot$' | awk '{ut += $3} END {print ut}'): 
Similar à linha anterior, esse comando calcula o espaço em disco utilizado somando a terceira 
coluna (espaço utilizado) na saída do comando df e armazenando-o na variável udisk.

pdisk=$(df -Bg | grep '^/dev/' | grep -v '^/boot$' | awk '{ut += $3} {ft += $2} END {print (ut/ft*100)}'): 
Esta linha calcula a porcentagem de espaço em disco utilizado, dividindo o espaço em disco utilizado 
(ut) pelo espaço em disco total (ft) e multiplicando por 100. O resultado é atribuído à variável pdisk.

cpul=$(top -bn1 | grep Cpu | awk '{printf("%.1f%%", $2 = $4)}'): 
Esta linha recupera a carga da CPU em percentagem. O comando top é usado com a opção -bn1 para ser 
executado em modo batch e exibir apenas uma vez. A saída é direcionada para grep para encontrar a 
linha contendo "Cpu". Em seguida, o awk é usado para extrair e imprimir a quarta coluna (carga da CPU) 
com uma casa decimal. O resultado é atribuído à variável cpul.

lboot=$(uptime -s | awk '{printf("%s %s", $1, substr($2, 1, length($2) - 3))}'): 
Esta linha recupera a data e hora do último arranque do sistema. O comando uptime -s exibe o 
tempo de arranque do sistema. A saída é direcionada para o awk para formatar o resultado, 
imprimindo a primeira coluna (data) e uma substring da segunda coluna (hora) para remover 
os últimos três caracteres (segundos). O resultado formatado é atribuído à variável lboot.

lvm=$(lsblk | grep lvm | wc -l | awk '{if ($1){printf("Sim"); exit;} else print "Não"}'): 
Esta linha verifica se o LVM (Logical Volume Manager) está em uso no sistema. 
Ela utiliza o comando lsblk para listar os dispositivos de bloco, grep para buscar as linhas 
contendo "lvm" e wc -l para contar o número de linhas. Em seguida, o awk é usado para imprimir 
"Sim" se a contagem for maior que zero, indicando o uso do LVM; caso contrário, imprime "Não". 
O resultado é atribuído à variável lvm.

tcp=$(netstat -an | grep 'ESTABLISHED' | wc -l): 
Esta linha conta o número de conexões TCP estabelecidas no sistema. Ela utiliza o comando netstat 
para exibir as conexões de rede (opção -an), direciona a saída para o grep para filtrar apenas as 
linhas contendo "ESTABLISHED" e, por fim, wc -l conta o número de linhas correspondentes ao filtro. 
O resultado é atribuído à variável tcp.

log=$(users | wc -w): 
Esta linha conta o número de utilizadores com sessão iniciada. 
O comando users lista os utilizadores atualmente com sessão iniciada, e wc -w conta o número de 
palavras na saída (que representa o número de utilizadores). O resultado é atribuído à variável log.

ip=$(hostname -I): 
Aqui, o script obtém o endereço IPv4 do sistema usando o comando hostname -I, que exibe todos 
os endereços IP atribuídos ao hospedeiro. O resultado é atribuído à variável ip.

mac=$(cat /sys/class/net/enp0s3/address): 
Esta linha lê o endereço MAC da interface de rede chamada "enp0s3". 
O comando cat é usado para ler o conteúdo do ficheiro /sys/class/net/enp0s3/address, 
que contém o endereço MAC da interface. O resultado é atribuído à variável mac.

sudo=$(journalctl -q _COMM=sudo | grep COMMAND | wc -l): 
Aqui, o script conta o número de comandos executados com o comando sudo. 
O comando journalctl é usado com a opção -q para executar em modo silencioso e a opção _COMM=sudo 
para filtrar apenas os registos relacionados ao comando sudo. A saída é direcionada para o grep 
para encontrar as linhas contendo "COMMAND" e, em seguida, wc -l conta o número de linhas 
correspondentes. O resultado é atribuído à variável sudo.

wall "Arquitectura: $arch
CPU Física: $cpup
CPU Virtual: $cpuv
Utilização de Memória: $uram/${fram}MB ($pram%)
Utilização de Disco: $udisk/${fdisk}GB ($pdisk%)
Carga da CPU: $cpul
Último Arranque: $lboot
Utilização do LVM: $lvm
Conexões TCP: $tcp
Utilizadores com Sessão: $log
Rede: Endereço IPv4: $ip
Endereço MAC: ($mac)
Sudo: $sudo comandos"    

